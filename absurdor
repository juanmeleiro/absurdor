#!/usr/bin/env lua5.4

local argparse = require "argparse"
local json = require "json"
local path = require "path"
local fs = require "path.fs"
local record = require "lib.record"
local pprint = require("pprint").pprint
local date = require "date"

local report = require "lib/report"
require "lib/util"
require "lib/log"

local parser = argparse("absurdor", "Manage Absurdor duties")
	:command_target("command")

local commands = {}

-- Report
commands.report = parser:command("report", "Generate and send absurdor report")
commands.report:flag("-p", "Print report, but do not send")
commands.report:flag("-c", "Include commits in report")

-- Record
commands.record = parser:command("record", "Record events")
	:command_target("what")

---- Push
commands.push = commands.record:command("push", "A push of The Boulder")
commands.push:argument("who", "Name of the player")
commands.push:argument("when", "Timestamp of boulder push")
	:convert(maildate)
commands.push:option("-m", "Message ID where push happened"):target("where")
commands.log = parser:command("log", "Display log")

---- Transfer
commands.transfer = commands.record:command("transfer", "Transfer the Veblen")
commands.transfer:argument("who", "Name of the player")
commands.transfer:argument("when", "When the transfer took place")
	:convert(maildate)
commands.transfer:argument("payed", "Amount spent on the transfer")
	:convert(tonumber)
commands.transfer:option("-m", "Message ID where transfer happened"):target("where")

---- Devalue
commands.devalue = commands.record:command("devalue", "Devalue the Veblen")
commands.devalue:argument("who", "Name of the player")
commands.devalue:argument("when", "When the devalueing took place")
	:convert(maildate)
commands.devalue:option("-m", "Message ID where devalue happened"):target("where")

local args = parser:parse()

fn = "log.json"
log = decodewith(json.decode, fn)

if args.command == "report" then

	local r = Report:new()
	r:add_module(report.modules.Mail)
	r:add_module(report.modules.Header)
	r:add_module(report.modules.Banner)
	r:add_module(report.modules.Latest)
	r:add_module(report.modules.TopPushers)
	r:add_module(report.modules.Veblen)
	if args.c then
		r:add_module(report.modules.Commits)
	end
	r:add_module(report.modules.Footer)

	local tmpfn = ".tmp"
	local tmp = io.open(tmpfn, "w")
	r:report(log, tmp)
	tmp:close()

	if args.p then
		os.execute(string.format("cat %s", tmpfn))
		os.remove(tmpfn)
		pprint(r:log())
	else
		os.execute(string.format("vis %s", tmpfn))
		os.execute(string.format("neomutt -H %s -E", tmpfn))

		if yn("Archive report? [Yn] ") then
			table.insert(log, r:log())
			os.rename(tmpfn, string.format("archive/%s", os.date("!%F")))
		else
			os.remove(tmpfn)
		end
	end
elseif args.command == "record" then
	record[args.what](io.stdout, args, log)
elseif args.command == "log" then
	for _,e in ipairs(log) do
		io.write(fmt_event(e).."\n")
	end
end

encodewith(json.encode, fn, log)
os.execute(string.format('jq --sort-keys . %s > .tmp', fn))
os.execute(string.format('mv .tmp %s', fn))
