#!/usr/bin/env lua5.4

local argparse = require "argparse"
local json = require "json"
local path = require "path"
local fs = require "path.fs"
local record = require "lib.record"
local pprint = require("pprint").pprint
local date = require "date"

require "lib.util"
require "lib.log"

local parser = argparse("absurdor", "Manage Absurdor duties")
	:command_target("command")
local commands = {}

commands.report = parser:command("report", "Generate and send absurdor report")
commands.report:flag("-p", "Print report, but do not send")
commands.report:flag("-d", "Plot the difference, not the height")
commands.report:option("-t", "Which template to use")
	:default("templates/banner.m4")
	:argname("template")
	:target("template")
commands.record = parser:command("record", "Record events")
	:command_target("what")
commands.push = commands.record:command("push", "A push of The Boulder")
commands.push:argument("who", "Name of the player")
commands.push:argument("when", "Timestamp of boulder push")
	:convert(maildate)
commands.push:option("-m", "Message ID where push happened"):target("where")
commands.log = parser:command("log", "Display log")

commands.transfer = commands.record:command("transfer", "Transfer the Veblen")
commands.transfer:argument("who", "Name of the player")
commands.transfer:argument("when", "When the transfer took place")
	:convert(maildate)
commands.transfer:argument("payed", "Amount spent on the transfer")
	:convert(tonumber)
commands.transfer:option("-m", "Message ID where transfer happened"):target("where")

commands.devalue = commands.record:command("devalue", "Devalue the Veblen")
commands.devalue:argument("who", "Name of the player")
commands.devalue:argument("when", "When the devalueing took place")
	:convert(maildate)
commands.devalue:option("-m", "Message ID where devalue happened"):target("where")

local args = parser:parse()

fn = "log.json"
log = decodewith(json.decode, fn)

if args.command == "report" then

	height = 0
	local plot = {}
	local pushed = {}
	local max = 1
	local failed = false
	local who = {}
	local players = {}
	local veblen = {
		cost = 1,
		history = {},
		namewidth = 0
	}
	local last = 0
	local slope
	local maxslope = 1
	local maxheight = 0

	if #log > 0 then
		start = unix2week(log[1].when)
		max = start
	end

	for i,e in ipairs(log) do
		if e.what == "push" then
			local w = unix2week(e.when)
			if (unix2week(1739754105) <= w and plot[w] == 0 and plot[unix2week(e.when - 7*24*60*60)] < slope) or
			   (unix2week(1693159683) <= w and w < unix2week(1739754105) and not (pushed[unix2week(e.when - 7*24*60*60)] or pushed[w])) or
			   (w < unix2week(1693159683) and height == 100)
                -- At 1739754105 seconds from Unix epoch, the governing rule was changed
                -- so that the Boulder falls to zero if it was not pushed as much as its
                -- slope the previous week. However, the change is not retroactive; hence
                -- the magic number.

				-- At 1693159683 seconds from Unix epoch, the governing
				-- rule was changed so that the Boulder falls to zero
				-- if it was not pushed the previous week. However, the
				-- change is not retroactive; hence the magic number.
			then
				height = 1
				slope = 1
			else
				height = (height + 1)
				maxheight = math.max(height, maxheight)
			end
			plot[w] = (plot[w] or 0) + 1
			if slope and plot[w] > slope then
				slope = plot[w]
				if e.when > 1739754105 then
					maxslope = math.max(slope, maxslope)
				end
			end
			who[w] = who[w] or {}
			table.insert(who[w], e.who)
			pushed[w] = true
			if height >= plot[max] then
				max = w
			end
			if players[e.who] then
				players[e.who] = players[e.who] + 1
			else
				players[e.who] = 1
			end
		elseif e.what == "transfer" then
			die(e.payed < veblen.cost, string.format("Recorded transfer by %s used less spendies (%d) than the current Veblen cost (%s)", e.who, e.payed, veblen.cost))
			if veblen.current then table.insert(veblen.history, veblen.current) end
			veblen.current = {who = e.who, payed = e.payed, cost = veblen.cost, when = e.when, what = "transfer"}
			veblen.cost = e.payed + 1
			veblen.namewidth = math.max(veblen.namewidth, string.len(e.who))
		elseif e.what == "devalue" then
			local val = math.ceil(veblen.cost/2)
			table.insert(veblen.history, {when = e.when, what = "devalue", value = e.value})
			veblen.cost = e.value
		elseif e.what == "report" then
			veblen.cost = e.cost or veblen.cost
			height = e.height or e.height
			last = e.when
			slope = e.slope or 1
		end
	end

	local news = {}
	for i,e in ipairs(log) do
		if e.when > last then
			table.insert(news, e)
		end
	end

	table.insert(veblen.history, veblen.current)

	local t = os.time()
	local w = unix2week(t)
	if (not (w == 0)) and (not pushed[unix2week(t - 7*24*60*60)]) then
		failed = true
		if not pushed[w] then
			height = 0
			plot[w] = 0
		end
	end

	vars = {
		YYYY   = os.date("!%Y"),
		MM     = os.date("!%m"),
		DD     = os.date("!%d"),
		MAXH   = string.format("%d", maxheight),
		MAXS   = string.format("%d", maxslope),
		H      = string.format("%d", height),
		S      = string.format("%d", slope)
	}

	defs = ""

	for k, v in pairs(vars) do
		defs = defs .. string.format(" --define=%s=%s", k, v)
	end

	tmpname = ".tmp"
	-- Height banner
	os.execute(string.format("m4 %s %s >> %s", defs, args.template, tmpname))

	f = io.open(tmpname, "a")

	f:write("EVENTS SINCE LAST REPORT\n")
	table.sort(news, function(e0, e1) return e0.when > e1.when end)
	for i,e in ipairs(news) do
		f:write(fmt_event(e) .. "\n")
	end
	f:write("\n")

	-- Top pushers
	f:write("TOP PUSHERS\n")
	local scores = {}
	for p,v in pairs(players) do
		table.insert(scores, {player = p, pushes = v})
	end
	table.sort(scores, function (s0, s1) return s0.pushes > s1.pushes end)
	for i,s in ipairs(scores) do
		f:write(string.format("#%02d %2d %s %s\n", i, s.pushes, string.rep("=", s.pushes), s.player))
	end
	f:write("\n")

	f:write("\n----------------------------------------------------------------------\nTHE VEBLEN\n\n")
	f:write("          The Veblen\n")
	f:write(string.format("          is owned by %s\n", veblen.current.who))
	f:write(string.format("          and costs %d spendies\n\n", veblen.cost))

	f:write("          It is shiny.\n")
	f:write("          It is round (and thus pointless).\n")
	f:write("          It is admired.\n")
	f:write("          It has infinite points and is thus no longer pointless.\n")
	f:write("            (N.B. do note that that's a circle)\n")
	f:write("\n")

	f:write("HISTORY\n")
	table.sort(veblen.history, function(x,y) return x.when > y.when end)
	for _,e in ipairs(veblen.history) do
		if e.what == "transfer" then
			f:write(string.format("[%s] %s %s%s\n", os.date("!%Y-%m-%d %H:%M %z", e.when), string.rep(" ", veblen.namewidth - string.len(e.who)) .. e.who, string.rep("$", e.cost), string.rep("+", e.payed - e.cost)))
		elseif e.what == "devalue" then
			f:write(string.format("[%s] %s %s\n", os.date("!%Y-%m-%d %H:%M %z", e.when), string.rep(" ", veblen.namewidth), string.rep("$", e.value)))
		end
	end
	f:write('[2024-07-18 02:59 +0000] The Veblen is created')
	f:write("\n\n")

	f:write("----------------------------------------------------------------------\n")
	f:write("Do you have any suggestions on what I should put on the report?\n")
	f:write("Send them to me!\n")
	f:write("======================================================================\n")
	f:close()

	if args.p then
		os.execute(string.format("cat %s", tmpname))
		os.remove(tmpname)
	else
		os.execute(string.format("neomutt -H %s -E", tmpname))

		if yn("Archive report? [Yn] ") then
			table.insert(log, {
							 when = os.time(),
							 what = "report",
							 height = height,
							 cost = veblen.cost,
							 owner = veblen.current.who
			})
			os.rename(tmpname, string.format("archive/%s", os.date("!%F")))
		else
			os.remove(tmpname)
		end
	end
elseif args.command == "record" then
	record[args.what](io.stdout, args, log)
elseif args.command == "log" then
	for _,e in ipairs(log) do
		io.write(fmt_event(e).."\n")
	end
end

encodewith(json.encode, fn, log)
os.execute(string.format('jq --sort-keys . %s > .tmp', fn))
os.execute(string.format('mv .tmp %s', fn))
